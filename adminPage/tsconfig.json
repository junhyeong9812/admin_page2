{
  "compilerOptions": {
    // 컴파일러가 지원하는 최신 ECMAScript 기능을 타겟으로 설정합니다.
    "target": "ESNext",

    // 클래스 필드 선언에 대해 `define` 특성을 사용합니다. 최신 JavaScript 표준을 따르기 위해 권장되는 설정입니다.
    "useDefineForClassFields": true,

    // 사용할 라이브러리의 목록을 지정합니다. DOM, DOM.Iterable, 최신 ECMAScript 기능을 사용합니다.
    "lib": ["DOM", "DOM.Iterable", "ESNext"],

    // JavaScript 파일을 TypeScript 컴파일러에서 허용하지 않습니다.
    "allowJs": false,

    // 라이브러리 파일의 타입 검사를 건너뜁니다. 빌드 속도를 높이기 위해 사용됩니다.
    "skipLibCheck": true,

    // CommonJS 모듈에서 ES 모듈로의 자동 변환을 비활성화합니다.
    "esModuleInterop": false,

    // ES 모듈의 기본 내보내기와 같은 방식으로 모듈을 가져올 수 있게 합니다.
    "allowSyntheticDefaultImports": true,

    // TypeScript의 엄격한 타입 검사를 활성화합니다. 타입 안정성을 높이기 위해 권장됩니다.
    "strict": true,

    // 파일 이름의 대소문자를 강제로 일관성 있게 유지하도록 합니다. OS에 따라 대소문자를 구분하지 않는 파일 시스템을 사용하더라도 코드베이스에서 일관성을 유지할 수 있습니다.
    "forceConsistentCasingInFileNames": true,

    // 모듈 시스템을 최신 ECMAScript 모듈 시스템으로 설정합니다.
    "module": "ESNext",

    // 모듈 해석 방식을 번들러(예: Vite, Webpack)와 호환되도록 설정합니다.
    "moduleResolution": "bundler",

    // JSON 모듈을 가져올 수 있게 합니다. JSON 파일도 모듈로서 다룰 수 있습니다.
    "resolveJsonModule": true,

    // 각 파일을 고립된 모듈로 취급합니다. 파일 단위로 컴파일이 가능하며, 이는 빠른 피드백 루프를 제공합니다.
    "isolatedModules": true,

    // 컴파일러가 실제로 코드를 출력하지 않도록 합니다. 이는 TypeScript를 사용하지만 별도의 빌드 시스템을 사용하는 경우 유용합니다.
    "noEmit": true,

    // JSX 구문을 `react-jsx`로 설정하여 최신 React 17+ JSX 변환을 사용합니다.
    "jsx": "react-jsx",

    // 추가 옵션
    // 기본 모듈 해석의 기준(base URL)을 `./src`로 설정합니다. 이로 인해 상대 경로 대신 절대 경로를 사용할 수 있게 됩니다.
    "baseUrl": "./src",

    // `paths`를 통해 경로 별칭을 설정합니다. 예를 들어, `@/`를 `./src/`로 매핑합니다. 이를 통해 코드에서 경로를 간결하게 사용할 수 있습니다.
    "paths": {
      "@/*": ["./*"]
    }
  },

  // 프로젝트에서 포함할 파일 및 디렉토리를 지정합니다. 여기서는 `src` 디렉토리를 포함합니다.
  "include": ["src"],

  // 프로젝트 간의 의존성을 관리하기 위해 `tsconfig.node.json` 파일을 참조합니다. 이는 모노레포나 다중 패키지 구조에서 유용합니다.
  "references": [{ "path": "./tsconfig.node.json" }]
}
